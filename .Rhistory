library(tidyverse)
install.packages(tidyverse)
install.packages("tidyverse")
install.packages("mlbench")
install.packages("caTools")
install.packages("leaps")
library(tidyverse)
library(mlbench)
library(caTools)
library(leaps)
#loading the data
data("BreastCancer")
#checking the size
dim(BreastCancer)
#printing the first 6 rows of the data
head(BreastCancer)
#removing the rows with null values
BreastCancer=BreastCancer[complete.cases(BreastCancer),]
#checking population distribution in each category
table(BreastCancer$Class)
#numerical exploratory data analysis
summary(BreastCancer)
#graphical plot of exploratory data analysis
pairs(BreastCancer[,2:10])
#picking predictor variables and converting them as numeric
(X1=BreastCancer[,2:10])
X1$Cl.thickness=as.numeric(X1$Cl.thickness)
X1$Cell.size=as.numeric(X1$Cell.size)
X1$Cell.shape=as.numeric(X1$Cell.shape)
X1$Marg.adhesion=as.numeric(X1$Marg.adhesion)
X1$Epith.c.size=as.numeric(X1$Epith.c.size)
X1$Bare.nuclei=as.numeric(X1$Bare.nuclei)
X1$Bl.cromatin=as.numeric(X1$Bl.cromatin)
X1$Normal.nucleoli=as.numeric(X1$Normal.nucleoli)
X1$Mitoses=as.numeric(X1$Mitoses)
#scaling the variable
(X1= scale(X1))
#Pick out response variable
y=BreastCancer[,11]
y = as.integer(y)
y=y-1
#combining to make a new data frame
breast_cancer=data.frame(X1,y)
#storing the value of n and p
n=nrow(breast_cancer)
p=ncol(breast_cancer)-1
## Set the seed to make the analysis reproducible
set.seed(1)
#installing the library for best subset selection
library(bestglm)
install.packages("bestglm")
#installing the library for best subset selection
library(bestglm)
#Apply best subset selection
bss_fit_AIC= bestglm(breast_cancer, family=binomial, IC="AIC")
bss_fit_BIC= bestglm(breast_cancer, family=binomial, IC="BIC")
#examine the results
bss_fit_AIC$Subsets
bss_fit_BIC$Subsets
#identify best-fitting models
(best_AIC=bss_fit_AIC$ModelReport$Bestk)
(best_BIC=bss_fit_BIC$ModelReport$Bestk)
bss_fit_AIC$Subsets
bss_fit_BIC$Subsets
coef(bss_fit_AIC,5)
#create multi panel plotting device
par(mfrow=c(1,2))
#Produce plots,highlighting optimal value of K
plot(0:p, bss_fit_AIC$Subsets$AIC, xlab = "Number of predictors", ylab = "AIC", type="b")
points(best_AIC, bss_fit_AIC$Subsets$AIC[best_AIC+1], col="red", pch=16)
plot(0:p, bss_fit_BIC$Subsets$BIC, xlab = "Number of predictors", ylab = "BIC", type="b")
points(best_BIC, bss_fit_BIC$Subsets$BIC[best_BIC+1], col="red", pch=16)
# Load packages
library(mlbench)
library(dplyr)
library(tidyverse)
library(Hmisc)
install.packages("dplyr")
install.packages("dplyr")
# Load packages
library(mlbench)
library(dplyr)
install.packages("dplyr")
install.packages("dplyr")
library(dplyr)
library(tidyverse)
library(Hmisc)
install.packages("Hmisc")
library(Hmisc)
# Load the data
data(BreastCancer)
# Check size
dim(BreastCancer)
# Load the data
data(BreastCancer)
# Load packages
library(mlbench)
# Load the data
data(BreastCancer)
# Check size
dim(BreastCancer)
# Explore summary
summary(BreastCancer)
## Convert factor column into numeric
# Check the class of each column
sapply(BreastCancer, class)
# Identify the factor columns only
sapply(BreastCancer, is.factor)
# Convert factor to quantitative variables (without 'Class' column)
BreastCancer[ , 2:10] <- as.data.frame(apply(BreastCancer[ , 2:10], 2, as.numeric))
# Check the class of each column
sapply(BreastCancer, class)
## Remove missing values (NA)
BreastCancer <- BreastCancer %>% drop_na()
## Histogram for all numeric columns
hist.data.frame(BreastCancer[2:10])
library(ElemStatLearn)
install.packages("ElemStatLearn")
library(ElemStatLearn)
pairs(BreastCancer[2:10])
BreastCancer[, 2:10]
BreastCancer[, 2:10]
BreastCancer[2:10]
## Histogram for all numeric columns
hist.data.frame(BreastCancer[,2:10])
## Interpreting a scatter plot matrix
pairs(BreastCancer[,2:10])
## Scaling the numeric variables only
sclaed_numeric_var = scale(BreastCancer[,2:10])
View(sclaed_numeric_var)
## Scaling the numeric variables only
scaled_numeric_var = scale(BreastCancer[,2:10])
View(sclaed_numeric_var)
colnames(scaled_numeric_var)
X = scaled_numeric_var[,c(1,2)]
plot(X[,1], X[,2], xlab=expression(x[1]), ylab=expression(x[2]))
View(X)
## Interpreting a scatter plot matrix
pairs(BreastCancer)
View(BreastCancer)
er[,c(2,3)]
X = BreastCancer[,c(2,3)]
plot(X[,2], X[,3], xlab=expression(x[2]), ylab=expression(x[3]))
par(mfrow=c(1,2))
X = BreastCancer[,c(2,3)]
plot(X[,2], X[,3], xlab=expression(x[2]), ylab=expression(x[3]))
plot(X[,2], X[,3], xlab=expression(x[2]), ylab=expression(x[3]))
Z = scaled_numeric_var[,c(1,2)]
plot(Z[,1], Z[,2], xlab=expression(x[1]), ylab=expression(x[2]))
plot(Z[,1], Z[,2], xlab=expression(x[1]), ylab=expression(x[2]))
plot(Z[,1], Z[,2], xlab=expression(x[1]), ylab=expression(x[2]))
plot(Z[,1], Z[,2], xlab=expression(x[1]), ylab=expression(x[2]))
numeric_var = BreastCancer[,2:10]
View(numeric_var)
X = numeric_var[,c(1,2)]
plot(X[,1], X[,2], xlab=expression(x[1]), ylab=expression(x[2]))
par(mfrow=c(1,2))
X = numeric_var[,c(1,2)]
plot(X[,1], X[,2], xlab=expression(x[1]), ylab=expression(x[2]))
Z = scaled_numeric_var[,c(1,2)]
plot(Z[,1], Z[,2], xlab=expression(x[1]), ylab=expression(x[2]))
plot(X[,1], X[,2])
View(X)
plot(X[,1], X[,2], xlab="Cell thickness", ylab="Cell size")
par(mfrow=c(1,2))
X = numeric_var[,c(1,2)]
plot(X[,1], X[,2], xlab="Cell thickness", ylab="Cell size")
Z = scaled_numeric_var[,c(1,2)]
plot(Z[,1], Z[,2], xlab="Cell thickness", ylab="Cell size")
colMeans(Z)
apply(Z, 2, var)
var(Z)
cor(X)
## Numeric Summaries for all var.
colMeans(scaled_numeric_var)
apply(scaled_numeric_var, 2, var)
var(scaled_numeric_var)
diag(var(scaled_numeric_var))
update.packages(ask = FALSE, checkBuilt = TRUE)
tinytex::tlmgr_update()
tinytex::reinstall_tinytex()
tinytex::reinstall_tinytex()
setwd("D:/PGT/CSC8631/Coursework/Final_submission/Submit/CSC8631_MOOC")
# Load library
library("ProjectTemplate")
# Load Project
load.project()
